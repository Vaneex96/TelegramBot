version: '3.9'

volumes:
  rabbitmq-data:
    driver: local
  postgres-data:
    driver: local
  traefik-certs:
    driver: local

services:

  node:
    container_name: node
    restart: on-failure
    build:
      context: ./
      dockerfile: ./node/Dockerfile
    environment:
      NODE_PORT: ${NODE_PORT}
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_PORT: ${RABBIT_PORT}
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
      DOC_MESSAGE_UPDATE: ${DOC_MESSAGE_UPDATE}
      PHOTO_MESSAGE_UPDATE: ${PHOTO_MESSAGE_UPDATE}
      TEXT_MESSAGE_UPDATE: ${TEXT_MESSAGE_UPDATE}
      ANSWER_MESSAGE: ${ANSWER_MESSAGE}
      REGISTRATION_MAIL_MESSAGE: ${REGISTRATION_MAIL_MESSAGE}
      REGISTRATION_MAIL_SEND_RESULT: ${REGISTRATION_MAIL_SEND_RESULT}
      FIND_SERIES_TO_SUBSCRIBE: ${FIND_SERIES_TO_SUBSCRIBE}
      FIND_SERIES_TO_SUBSCRIBE_RESULT: ${FIND_SERIES_TO_SUBSCRIBE_RESULT}
      FIND_SERIES_VOICE_ACTS: ${FIND_SERIES_VOICE_ACTS}
      FIND_SERIES_VOICE_ACTS_RESULT: ${FIND_SERIES_VOICE_ACTS_RESULT}
      FIND_LAST_SERIES: ${FIND_LAST_SERIES}
      FIND_LAST_SERIES_RESULT: ${FIND_LAST_SERIES_RESULT}

      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
      TG_BOT_FILE_INFO_URI: ${TG_BOT_FILE_INFO_URI}
      TG_BOT_FILE_STORAGE_URI: ${TG_BOT_FILE_STORAGE_URI}
      TG_BOT_URI: ${TG_BOT_URI}
      SALT: ${SALT}

      SECRET_ID: ${SECRET_ID}
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
        max-file: '3'
    depends_on:
      rabbit-mq:
        condition: service_healthy
      postgres-db:
        condition: service_healthy

  rest-service:
    container_name: rest-service
    restart: on-failure
    build:
      context: ./
      dockerfile: ./rest-service/Dockerfile
    ports:
      - ${REST_SERVICE_PORT}:${REST_SERVICE_PORT}
    environment:
      REST_SERVICE_PORT: ${REST_SERVICE_PORT}
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SALT: ${SALT}
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.services.rest-service.loadbalancer.server.port=${REST_SERVICE_PORT}"
#      - "traefik.http.routers.rest-service.rule=Host(`${HOST_URL}`) && PathPrefix(`/api`)"
#      - "traefik.http.routers.rest-service.entrypoints=websecure8"
#      - "traefik.http.routers.rest-service.tls=true"
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
        max-file: '3'
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbit-mq:
        condition: service_healthy


  mail-service:
    container_name: mail-service
    restart: on-failure
    build:
      context: ./
      dockerfile: ./mail-service/Dockerfile
    environment:
      MAIL_SERVICE_PORT: ${MAIL_SERVICE_PORT}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_PROTOCOL: ${MAIL_PROTOCOL}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_PORT: ${RABBIT_PORT}
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
      REGISTRATION_MAIL_MESSAGE: ${REGISTRATION_MAIL_MESSAGE}
      REGISTRATION_MAIL_SEND_RESULT: ${REGISTRATION_MAIL_SEND_RESULT}
      ACTIVATION_URI: ${ACTIVATION_URI}
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
        max-file: '3'
    depends_on:
      rabbit-mq:
        condition: service_healthy


  parser:
    container_name: parser
    restart: on-failure
    build:
      context: ./
      dockerfile: ./parser/Dockerfile
    environment:
      PARSER_PORT: ${PARSER_PORT}
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_PORT: ${RABBIT_PORT}
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
      SECRET_ID: ${SECRET_ID}
      URL_SEARCHING_TEMPLATE_HDREZKA: ${URL_SEARCHING_TEMPLATE_HDREZKA}
      WEBDRIVER_PATH: ${WEBDRIVER_PATH}
      XPATH_VOICE_ACT: ${XPATH_VOICE_ACT}
      XPATH_SEASON: ${XPATH_SEASON}
      CSS_SELECTOR_FOR_TRANSLATOR: ${CSS_SELECTOR_FOR_TRANSLATOR}
    depends_on:
      rabbit-mq:
        condition: service_healthy


  rabbit-mq:
    container_name: rabbit-mq
    hostname: rabbitmq
    image: rabbitmq:3.12.12-management-alpine
    ports:
      - ${RABBIT_AMQP_PORT_MAPPING}
      - ${RABBIT_GUI_PORT_MAPPING}
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "--silent", "--quiet", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 30s
    restart: unless-stopped

  postgres-db:
    container_name: postgres-db
    hostname: postgres
    image: postgres:14.5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT_MAPPING}
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DATABASE} -h 127.0.0.1" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  dispatcher:
    container_name: dispatcher
    restart: on-failure
    build:
      context: ./
      dockerfile: ./dispatcher/Dockerfile
    ports:
      - ${DISPATCHER_PORT}:${DISPATCHER_PORT}
    environment:
      DISPATCHER_PORT: ${DISPATCHER_PORT}
      TG_BOT_NAME: ${TG_BOT_NAME}
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
      TG_BOT_URI: ${TG_BOT_URI}
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_PORT: ${RABBIT_PORT}
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}

      DOC_MESSAGE_UPDATE: ${DOC_MESSAGE_UPDATE}
      PHOTO_MESSAGE_UPDATE: ${PHOTO_MESSAGE_UPDATE}
      TEXT_MESSAGE_UPDATE: ${TEXT_MESSAGE_UPDATE}
      ANSWER_MESSAGE: ${ANSWER_MESSAGE}
      REGISTRATION_MAIL_MESSAGE: ${REGISTRATION_MAIL_MESSAGE}
      REGISTRATION_MAIL_SEND_RESULT: ${REGISTRATION_MAIL_SEND_RESULT}
      FIND_SERIES_TO_SUBSCRIBE: ${FIND_SERIES_TO_SUBSCRIBE}
      FIND_SERIES_TO_SUBSCRIBE_RESULT: ${FIND_SERIES_TO_SUBSCRIBE_RESULT}
      FIND_SERIES_VOICE_ACTS: ${FIND_SERIES_VOICE_ACTS}
      FIND_SERIES_VOICE_ACTS_RESULT: ${FIND_SERIES_VOICE_ACTS_RESULT}
      FIND_LAST_SERIES: ${FIND_LAST_SERIES}
      FIND_LAST_SERIES_RESULT: ${FIND_LAST_SERIES_RESULT}
    #    labels:
    #      - "traefik.enable=true"
    #      - "traefik.http.services.dispatcher.loadbalancer.server.port=${DISPATCHER_PORT}"
    #      - "traefik.http.routers.dispatcher.rule=Host(`${HOST_URL}`) && PathPrefix(`/callback`)"
    #      - "traefik.http.routers.dispatcher.entrypoints=websecure8"
    #      - "traefik.http.routers.dispatcher.tls=true"
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
        max-file: '3'
    depends_on:
      rabbit-mq:
        condition: service_healthy